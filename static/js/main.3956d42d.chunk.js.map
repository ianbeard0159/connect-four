{"version":3,"sources":["Header.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Space","style","this","props","color","ControlPanel","cPlayer","onClick","Board","state","boardState","players","currentPlayer","winner","console","log","setState","bState","inX","inY","connection","check","i","j","k","l","column","colHeight","row","player","calculateWinner","length","backgroundColor","spaceList","width","push","rowList","height","renderSpace","id","e","columnClick","parseInt","target","renderSpaces","reset","display","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3956d42d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return(\r\n            <h2 className=\"header-content\">Connect Four</h2>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Space extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"space\" style={this.props.color}></div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ControlPanel(props){\r\n    return(\r\n        <div className=\"controlPanel\">\r\n            <h3>Current Player: {props.cPlayer}</h3>\r\n            <button onClick={props.onClick}>Reset</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            boardState: [],\r\n            players: [\"black\", \"red\"],\r\n            currentPlayer: 0,\r\n            winner: null,\r\n        };\r\n    }\r\n\r\n    reset(){\r\n        console.log(\"reset\");\r\n        this.setState({\r\n            boardState: [],\r\n            currentPlayer: 0,\r\n            winner: null,\r\n        })\r\n    }\r\n    \r\n    calculateWinner(bState, inX, inY, cPlayer){\r\n        var connection;\r\n        var check;\r\n\r\n        //                  -= Check Left and Right =-\r\n        connection = 1;\r\n        for(var i = 1; i < 4; i++){\r\n            // Check Left\r\n            check = false;\r\n            if(typeof bState[inX + i] !== \"undefined\"){\r\n                if(bState[inX + i][inY] === cPlayer){\r\n                    check = true;\r\n                    connection++;\r\n                }\r\n            }\r\n            // Check Right\r\n            if(typeof bState[inX - i] !== \"undefined\"){\r\n                if(bState[inX - i][inY] === cPlayer){\r\n                    check = true;\r\n                    connection++;\r\n                }\r\n            }\r\n            // If neither were true or of someoneone has connected four, break the loop\r\n            if(!check){\r\n                break;\r\n            }\r\n            else if(connection >= 4){\r\n                console.log(\"Winner Horz\");\r\n                return cPlayer;\r\n            }\r\n        }\r\n        \r\n        //                  -= Check Up and Down =-\r\n        connection = 1;\r\n        for(var j = 1; j < 4; j++){\r\n            // Check Up\r\n            check = false;\r\n            if(typeof bState[inX][inY - j] !== \"undefined\"){\r\n                if(bState[inX][inY - j] === cPlayer){\r\n                    check = true;\r\n                    connection++;\r\n                }\r\n            }\r\n            // Check Down\r\n            if(typeof bState[inX][inY + j] !== \"undefined\"){\r\n                if(bState[inX][inY + j] === cPlayer){\r\n                    check = true;\r\n                    connection++;\r\n                }\r\n            }\r\n            \r\n            // If neither were true or of someoneone has connected four, break the loop\r\n            if(!check){\r\n                break;\r\n            }\r\n            else if(connection >= 4){\r\n                console.log(\"Winner Vert\");\r\n                return cPlayer;\r\n            }\r\n        }\r\n\r\n        //                  -= Check Diagonal Down =-\r\n        connection = 1;\r\n        for(var k = 1; k < 4; k++){\r\n            // Check Up\r\n            check = false;\r\n            if(typeof bState[inX - k] !== \"undefined\"){\r\n                if(typeof bState[inX - k][inY - k] !== \"undefined\"){\r\n                    if(bState[inX - k][inY - k] === cPlayer){\r\n                        check = true;\r\n                        connection++;\r\n                    }\r\n                }\r\n            }\r\n            // Check Down\r\n            if(typeof bState[inX + k] !== \"undefined\"){\r\n                    if(typeof bState[inX + k][inY + k] !== \"undefined\"){\r\n                    if(bState[inX + k][inY + k] === cPlayer){\r\n                        check = true;\r\n                        connection++;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // If neither were true or of someoneone has connected four, break the loop\r\n            if(!check){\r\n                break;\r\n            }\r\n            else if(connection >= 4){\r\n                console.log(\"Winner D-Down\");\r\n                return cPlayer;\r\n            }\r\n        }\r\n\r\n         //                  -= Check Diagonal Up =-\r\n         connection = 1;\r\n         for(var l = 1; l < 4; l++){\r\n            // Check Up\r\n            check = false;\r\n            if(typeof bState[inX - l] !== \"undefined\"){\r\n                if(typeof bState[inX - l][inY + l] !== \"undefined\"){\r\n                    if(bState[inX - l][inY + l] === cPlayer){\r\n                        check = true;\r\n                        connection++;\r\n                    }\r\n                }\r\n            }\r\n            // Check Down\r\n            if(typeof bState[inX + l] !== \"undefined\"){\r\n                if(typeof bState[inX + l][inY - l] !== \"undefined\"){\r\n                    if(bState[inX + l][inY - l] === cPlayer){\r\n                        check = true;\r\n                        connection++;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // If neither were true or of someoneone has connected four, break the loop\r\n            if(!check){\r\n                break;\r\n            }\r\n            else if(connection >= 4){\r\n                console.log(\"Winner D-Up\");\r\n                return cPlayer;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    columnClick(column, colHeight){\r\n        var bState = this.state.boardState;\r\n        var player = this.state.currentPlayer;\r\n        var row;\r\n        //If the column is not empty or full\r\n        if(bState[column][colHeight-1] && !bState[column][0]){\r\n            //Find out how full the column is\r\n            for(var i = 0; i < colHeight; i++){\r\n                if(bState[column][i]){\r\n                    bState[column][i-1] = this.state.players[player];\r\n                    row = i-1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        //If the column is empty\r\n        else if(!bState[column][colHeight-1]){\r\n            bState[column][colHeight-1] = this.state.players[player];\r\n            row = colHeight-1;\r\n        }\r\n        //If the column is full, don't change the board state\r\n        else{\r\n            console.log(\"completely full\");\r\n            return;\r\n        }\r\n\r\n        // See if there is a winner\r\n        if(this.calculateWinner(bState, column, row, this.state.players[player])){\r\n            console.log(this.state.players[player] + \" is the winner\");\r\n            this.setState({\r\n                boardState: bState,\r\n                winner: this.state.players[player],\r\n            });\r\n        }\r\n\r\n        //Move to next player\r\n        player++;\r\n        if(player === this.state.players.length){\r\n            player = 0;\r\n        }\r\n        this.setState({\r\n            boardState: bState,\r\n            currentPlayer: player\r\n        });\r\n    }\r\n\r\n    // Create Spaces\r\n    renderSpace(column, row){\r\n        return <Space color={{backgroundColor:  this.state.boardState[column][row]}}/>;\r\n    }\r\n    renderSpaces(){\r\n        var spaceList = [];\r\n        //For each column\r\n        for(var column = 0; column < this.props.width; column++){\r\n            // Populate boardState with a number of empty arrays equal to the width of the grid\r\n            if(this.state.boardState.length < this.props.width){\r\n                this.state.boardState.push([]);\r\n            }\r\n            var rowList = [];\r\n            //For each row\r\n            for(var row = 0; row < this.props.height; row++){\r\n                rowList.push(this.renderSpace(column, row));\r\n            }\r\n            spaceList.push(<div className=\"col-container\">\r\n                <div className=\"column\" id={column} onClick={(e) => this.columnClick(parseInt(e.target.id), parseInt(this.props.height))}></div>\r\n                {rowList}\r\n            </div>);\r\n        }\r\n        return spaceList;\r\n    }\r\n\r\n    render(){\r\n        if(this.state.winner){\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"board\">\r\n                        <div className=\"win-display\" >{this.state.winner} wins</div>\r\n                        {this.renderSpaces()}\r\n                    </div>\r\n                    <ControlPanel cPlayer={this.state.players[this.state.currentPlayer]} onClick={() => this.reset()} />\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"board\">\r\n                        <div className=\"win-display\" style={{display: \"none\"}}></div>\r\n                        {this.renderSpaces()}\r\n                    </div>\r\n                    <ControlPanel cPlayer={this.state.players[this.state.currentPlayer]} onClick={() => this.reset()} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport Board from './Board';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"header\">\r\n        <Header />\r\n      </header>\r\n      <Board width={7} height={6}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}